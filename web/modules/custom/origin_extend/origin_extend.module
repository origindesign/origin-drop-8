<?php

use Drupal\Core\Cache\Cache;
use Drupal\node\Entity\Node;
use Drupal\node\NodeInterface;



/** Alter event repeat node before render
 *
 * @param array $build
 * @param \Drupal\Core\Entity\EntityInterface $entity
 * @param \Drupal\Core\Entity\Display\EntityViewDisplayInterface $display
 * @param $view_mode
 */
function origin_extend_node_view(array &$build, \Drupal\Core\Entity\EntityInterface $entity, \Drupal\Core\Entity\Display\EntityViewDisplayInterface $display, $view_mode) {

    // if event and reference field has been set
    if($entity->getType() == 'event' && $entity->get('field_event_reference')->getValue()){

        // Setup services and vars
        $entityTypeManager = \Drupal::service('entity_type.manager');
        $node_storage = $entityTypeManager->getStorage('node');
        $nid = $entity->get('field_event_reference')->getValue()[0]['target_id'];
        $referenced_node = $node_storage->load($nid);

        // If node exists
        if(isset($referenced_node->nid)){

            // Override fields
            $build['body'] = $referenced_node->body->view($view_mode);
            $build['field_address'] = $referenced_node->field_address->view($view_mode);
            $build['field_all_day'] = $referenced_node->field_all_day->view($view_mode);
            $build['field_email'] = $referenced_node->field_email->view($view_mode);
            $build['field_google_map_embed'] = $referenced_node->field_google_map_embed->view($view_mode);
            $build['field_main_image'] = $referenced_node->field_main_image->view($view_mode);
            $build['field_other_information'] = $referenced_node->field_other_information->view($view_mode);
            $build['field_paragraphs'] = $referenced_node->field_paragraphs->view($view_mode);
            $build['field_phone'] = $referenced_node->field_phone->view($view_mode);
            $build['field_related_content'] = $referenced_node->field_related_content->view($view_mode);
            $build['field_related_content_heading'] = $referenced_node->field_related_content_heading->view($view_mode);
            $build['field_subtitle'] = $referenced_node->field_subtitle->view($view_mode);
            $build['field_website'] = $referenced_node->field_website->view($view_mode);

        }

    }

}



/**
 * Implements hook_ENTITY_TYPE_insert().
 */
function origin_extend_node_presave(Node $node){

    // Clear cache tags for referenced nodes
    if ($node->getType() == 'event') {

        // Get nid of reference node if set
        $ref_nid = $node->field_event_reference->target_id;
        // Else et nid of current node
        if (empty($ref_nid)) {
            $ref_nid = $node->id();
        }

        // Select all nodes with reference set to $ref_nid and $ref_nid
        $conditions['group'] = array(
            "andor" => "OR",
            'grouping' => array(
                "nid" => array( $ref_nid, '='),
                "field_event_reference.target_id" => array( $ref_nid, '='),
            )
        );

        $range = array(
            "start" => 0,
            "length" => 1000
        );

        // Get list of nids
        $efq = \Drupal::service('efq.query_entities');
        $nodes = $efq->getNidsOnly('event', $conditions, $range);

        // Set cache tags list
        $tags = [];
        foreach($nodes as $nid){
            $tags[] = 'node:'.$nid;
        }

        // Clear the cache tags
        Cache::invalidateTags($tags);

    }

}



/**
 * Implements hook_token_info().
 * Setup tokens to be used in Schema
 */
function origin_extend_token_info() {
  $type = [
    'name' => t('Schema'),
    'description' => t('Tokens for SEO Schema'),
  ];
  $schema = [
    'logo' => ['name' => t("Logo"), 'description' => t('URL to the sites logo')],
    'phone' => ['name' => t("Phone"), 'description' => t('Phone number')],
    'social' => ['name' => t("Social"), 'description' => t('Social URLs')],
    'street_address' => ['name' => t("Street address"), 'description' => t('Street address')],
    'city' => ['name' => t("City"), 'description' => t('City')],
    'region' => ['name' => t("Region"), 'description' => t('Region')],
    'postcode' => ['name' => t("Postcode"), 'description' => t('Postcode')],
    'lat' => ['name' => t("Lat"), 'description' => t('Geolocation: Lat')],
    'lng' => ['name' => t("Lng"), 'description' => t('Geolocation: Lng')],
  ];
  return [
    'types' => ['schema' => $type],
    'tokens' => ['schema' => $schema],
  ];
}



/**
 * Implements hook_tokens().
 * Return token values based on active theme
 */
function origin_extend_tokens($type, $tokens, array $data, array $options, \Drupal\Core\Render\BubbleableMetadata $bubbleable_metadata) {
  $replacements = [];

  // Get theme
  $config = \Drupal::config('system.theme');
  $theme = $config->get('default');
  $base_theme_path = drupal_get_path('theme', $theme);

  $logo = $base_theme_path.'/logo.svg';
  $phone = '';
  $social = '';
  $streetAddress = '';
  $city = '';
  $region = '';
  $postcode = '';
  $lat = '';
  $lng = '';

  if ($type == 'schema') {
    foreach ($tokens as $name => $original) {
      switch ($name) {
        case 'logo':
          $replacements[$original] = $logo; break;
        case 'phone':
          $replacements[$original] = $phone; break;
        case 'social':
          $replacements[$original] = $social; break;
        case 'street_address':
          $replacements[$original] = $streetAddress; break;
        case 'city':
          $replacements[$original] = $city; break;
        case 'region':
          $replacements[$original] = $region; break;
        case 'postcode':
          $replacements[$original] = $postcode; break;
        case 'lat':
          $replacements[$original] = $lat; break;
        case 'lng':
          $replacements[$original] = $lng; break;
      }
    }
  }
  return $replacements;
}



/**
 * Add css to admin pages to format Paragraphs fields
 * @param array $attachments
 *
 */
function origin_extend_page_attachments(array &$attachments) {
    $is_admin = \Drupal::service('router.admin_context')->isAdminRoute();
    if ($is_admin) {
        $attachments['#attached']['library'][] = 'origin_extend/admin-css';
        return;
    }

}
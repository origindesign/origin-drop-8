"use strict";!function(l,d){d.behaviors.ajaxListLoading={},d.behaviors.ajaxListLoading.xhr=null,d.behaviors.ajaxListLoading.ajaxContainer="",d.behaviors.ajaxListLoading.ajaxPath="",d.behaviors.ajaxListLoading.params="",d.behaviors.ajaxListLoading.filterForm=l(".filterform"),d.behaviors.ajaxListLoading.category=l(".filterform .category"),d.behaviors.ajaxListLoading.attach=function(a){var r=d.behaviors.ajaxListLoading;l(".ajax-list-container",a).once("ajaxListLoading").each(function(){r.ajaxContainer=l(this),r.ajaxPath=r.ajaxContainer.attr("data-ajax-path"),r.params=r.ajaxContainer.data("default-params"),""!==window.location.hash&&r.updateParamsFromHash(),r.displayList(r.ajaxContainer,r.ajaxPath,r.params),l(window).off("hashchange.form-fragment").on("hashchange",function(){r.updateParamsFromHash(),r.displayList(r.ajaxContainer,r.ajaxPath,r.params)})}),l(".pager.ajax a").off("click").on("click",function(a){a.preventDefault(),a.stopPropagation();var t=l(this).data("params"),i=r.getTopPosition(l(".ajax-list-container"));if(0<r.category.length){var o=r.category.val();-1===o.indexOf("all")&&(t.category="field_category--"+o.replace(".term-",""))}r.xhr.abort(),window.history.pushState({params:JSON.stringify(t)},null,window.location),0<r.filterForm.length&&(i=r.getTopPosition(r.filterForm)),l("html,body").animate({scrollTop:i},"500"),l(".ajax-list-container .wrapper").fadeOut(function(){r.displayList(r.ajaxContainer,r.ajaxPath,t)})})},d.behaviors.ajaxListLoading.updateParamsFromHash=function(){var o=d.behaviors.ajaxListLoading,a=window.location.hash.substring(2).split("/");l.each(a,function(a,t){var i=t.split("=");o.params[i[0]]=i[1]})},d.behaviors.ajaxListLoading.updateFilters=function(a){var t=d.behaviors.ajaxListLoading,i=l(".filterform .from-date"),o=l(".filterform .to-date");if(0<i.length&&0<o.length){var r=a.date.replace("field_date_range--","").split(","),e=r[0].split("-"),n=r[1].split("-");i.val(moment(Date.parse(e[1]+"-"+e[0]+"-"+e[2])).format("MMM D, YYYY")),o.val(moment(Date.parse(n[1]+"-"+n[0]+"-"+n[2])).format("MMM D, YYYY"))}if(0<t.category.length){var s=void 0;s="all"!==a.category?".term-"+a.category.replace("field_category--",""):"all",t.category.val(s).blur().dropdown("update")}},d.behaviors.ajaxListLoading.displayList=function(i,a,t){var o=d.behaviors.ajaxListLoading;i.html("").removeClass("loaded"),o.updateFilters(t),o.xhr=l.ajax({type:"POST",url:a+"?response_type=ajax",data:t,success:function(a){var t=l("<div/>",{class:"wrapper"});t.html(a),i.html(t),i.addClass("loaded"),d.attachBehaviors(),d.blazy.init.revalidate()}})},d.behaviors.ajaxListLoading.getTopPosition=function(a){return a.offset().top-100}}(jQuery,Drupal);
//# sourceMappingURL=data:application/json;charset=utf8;base64,

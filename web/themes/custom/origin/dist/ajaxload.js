"use strict";!function(l,d){d.behaviors.ajaxListLoading={},d.behaviors.ajaxListLoading.xhr=null,d.behaviors.ajaxListLoading.ajaxContainer="",d.behaviors.ajaxListLoading.ajaxPath="",d.behaviors.ajaxListLoading.params="",d.behaviors.ajaxListLoading.filterForm=l(".filterform"),d.behaviors.ajaxListLoading.categories=l(".filterform .categories"),d.behaviors.ajaxListLoading.attach=function(a){var e=d.behaviors.ajaxListLoading;l(".ajax-list-container",a).once("ajaxListLoading").each(function(){e.ajaxContainer=l(this),e.ajaxPath=e.ajaxContainer.attr("data-ajax-path"),e.params=e.ajaxContainer.data("default-params"),""!==window.location.hash&&e.updateParamsFromHash(),e.displayList(e.ajaxContainer,e.ajaxPath,e.params),l(window).off("hashchange.form-fragment").on("hashchange",function(){e.updateParamsFromHash(),e.displayList(e.ajaxContainer,e.ajaxPath,e.params)})}),l(".pager.ajax a").off("click").on("click",function(a){a.preventDefault(),a.stopPropagation();var t=l(this).data("params"),i=e.getTopPosition(l(".ajax-list-container"));if(0<e.categories.length){var o=e.categories.val();-1===o.indexOf("all")&&(t.category="field_categories--"+o.replace(".term-",""))}e.xhr.abort(),window.history.pushState({params:JSON.stringify(t)},null,window.location),0<e.filterForm.length&&(i=e.getTopPosition(e.filterForm)),l("html,body").animate({scrollTop:i},"500"),l(".ajax-list-container .wrapper").fadeOut(function(){e.displayList(e.ajaxContainer,e.ajaxPath,t)})})},d.behaviors.ajaxListLoading.updateParamsFromHash=function(){var o=d.behaviors.ajaxListLoading,a=window.location.hash.substring(2).split("/");l.each(a,function(a,t){var i=t.split("=");o.params[i[0]]=i[1]})},d.behaviors.ajaxListLoading.updateFilters=function(a){var t=d.behaviors.ajaxListLoading,i=l(".filterform .from-date"),o=l(".filterform .to-date");if(0<i.length&&0<o.length){var e=a.date.replace("field_date_range--","").split(","),r=e[0].split("-"),s=e[1].split("-");i.val(moment(Date.parse(r[1]+"-"+r[0]+"-"+r[2])).format("MMM D, YYYY")),o.val(moment(Date.parse(s[1]+"-"+s[0]+"-"+s[2])).format("MMM D, YYYY"))}if(0<t.categories.length){var n=void 0;n="all"!==a.category?".term-"+a.category.replace("field_categories--",""):"all",t.categories.val(n).blur().dropdown("update")}},d.behaviors.ajaxListLoading.displayList=function(i,a,t){var o=d.behaviors.ajaxListLoading;i.html("").removeClass("loaded"),o.updateFilters(t),o.xhr=l.ajax({type:"POST",url:a+"?response_type=ajax",data:t,success:function(a){var t=l("<div/>",{class:"wrapper"});t.html(a),i.html(t),i.addClass("loaded"),d.attachBehaviors(),d.blazy.init.revalidate()}})},d.behaviors.ajaxListLoading.getTopPosition=function(a){return a.offset().top-100}}(jQuery,Drupal);
//# sourceMappingURL=data:application/json;charset=utf8;base64,

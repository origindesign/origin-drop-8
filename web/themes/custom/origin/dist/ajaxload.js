"use strict";!function(l,d){d.behaviors.ajaxListLoading={},d.behaviors.ajaxListLoading.xhr=null,d.behaviors.ajaxListLoading.ajaxContainer="",d.behaviors.ajaxListLoading.ajaxPath="",d.behaviors.ajaxListLoading.params="",d.behaviors.ajaxListLoading.filterForm=l(".filterform"),d.behaviors.ajaxListLoading.category=l(".filterform .category"),d.behaviors.ajaxListLoading.attach=function(a){var e=d.behaviors.ajaxListLoading;l(".ajax-list-container",a).once("ajaxListLoading").each(function(){e.ajaxContainer=l(this),e.ajaxPath=e.ajaxContainer.attr("data-ajax-path"),e.params=e.ajaxContainer.data("default-params"),""!==window.location.hash&&e.updateParamsFromHash(),e.displayList(e.ajaxContainer,e.ajaxPath,e.params),l(window).off("hashchange.form-fragment").on("hashchange",function(){e.updateParamsFromHash(),e.displayList(e.ajaxContainer,e.ajaxPath,e.params)})}),l(".pager.ajax a").off("click").on("click",function(a){a.preventDefault(),a.stopPropagation();var t,i=l(this).data("params"),o=e.getTopPosition(l(".ajax-list-container"));0<e.category.length&&(-1===(t=e.category.val()).indexOf("all")&&(i.category="field_category--"+t.replace(".term-",""))),e.xhr.abort(),window.history.pushState({params:JSON.stringify(i)},null,window.location),0<e.filterForm.length&&(o=e.getTopPosition(e.filterForm)),l("html,body").animate({scrollTop:o},"500"),l(".ajax-list-container .wrapper").fadeOut(function(){e.displayList(e.ajaxContainer,e.ajaxPath,i)})})},d.behaviors.ajaxListLoading.updateParamsFromHash=function(){var o=d.behaviors.ajaxListLoading,a=window.location.hash.substring(2).split("/");l.each(a,function(a,t){var i=t.split("=");o.params[i[0]]=i[1]})},d.behaviors.ajaxListLoading.updateFilters=function(a){var t,i,o,e,r=d.behaviors.ajaxListLoading,n=l(".filterform .from-date"),s=l(".filterform .to-date");0<n.length&&0<s.length&&(i=(t=a.date.replace("field_date_range--","").split(","))[0].split("-"),o=t[1].split("-"),n.val(moment(Date.parse(i[1]+"-"+i[0]+"-"+i[2])).format("MMM D, YYYY")),s.val(moment(Date.parse(o[1]+"-"+o[0]+"-"+o[2])).format("MMM D, YYYY"))),0<r.category.length&&(e=void 0,e="all"!==a.category?".term-"+a.category.replace("field_category--",""):"all",r.category.val(e).blur().dropdown("update"))},d.behaviors.ajaxListLoading.displayList=function(i,a,t){var o=d.behaviors.ajaxListLoading;i.html("").removeClass("loaded"),o.updateFilters(t),o.xhr=l.ajax({type:"POST",url:a+"?response_type=ajax",data:t,success:function(a){var t=l("<div/>",{class:"wrapper"});t.html(a),i.html(t),i.addClass("loaded"),d.attachBehaviors(),d.blazy.init.revalidate()}})},d.behaviors.ajaxListLoading.getTopPosition=function(a){return a.offset().top-100}}(jQuery,Drupal);
//# sourceMappingURL=data:application/json;charset=utf8;base64,

"use strict";!function(r,i){i.behaviors.events={},i.behaviors.events.from="",i.behaviors.events.to="",i.behaviors.events.category="",i.behaviors.events.attach=function(a){r(".ajax-events",a).once("events").each(function(){var t=i.behaviors.events,o=i.behaviors.ajaxListLoading;t.from=r(".filterform .from-date"),t.to=r(".filterform .to-date"),t.category=r(".filterform .category"),r(".filter-list").on("change",function(){t.reloadList()});var a=2;r(window).width()<740&&(a=1),t.from.datepicker({dateFormat:"M d, yy",monthNames:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],changeMonth:!0,changeYear:!0,showAnim:"fadeIn",yearRange:"c:c+1",numberOfMonths:a,onSelect:function(a){t.to.datepicker("option","minDate",a),r(this).change()}}),t.to.datepicker({dateFormat:"M d, yy",monthNames:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],changeMonth:!0,changeYear:!0,showAnim:"fadeIn",yearRange:"c:c+1",numberOfMonths:a}),window.onpopstate=function(a){var e="";null!==a.state?e=r.parseJSON(a.state.params):(e=i.behaviors.ajaxListLoading.params,t.category.val("all").blur().dropdown("update"));a=r(".filter-ajax").offset().top-200;r("html, body").animate({scrollTop:a},"500",function(){o.displayList(o.ajaxContainer,o.ajaxPath,e)})}})},i.behaviors.events.reloadList=function(){var a=i.behaviors.events,e=i.behaviors.ajaxListLoading,t=Date.parse(a.from.val()).toString("yyyy-MM-dd"),o=Date.parse(a.to.val()).toString("yyyy-MM-dd"),a=a.category.val(),n='{"content_type":"event","category":"'+(a="all"!==a?"field_category--"+a.replace(".term-",""):a)+'","date":"field_date_range--'+t+","+o+'","sort":"field_date_range-ASC"}';e.xhr.abort(),e.displayList(e.ajaxContainer,e.ajaxPath,r.parseJSON(n)),window.history.pushState({params:n},null,window.location)}}(jQuery,Drupal);
//# sourceMappingURL=data:application/json;charset=utf8;base64,

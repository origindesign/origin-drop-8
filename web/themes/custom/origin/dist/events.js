"use strict";!function(o,r){r.behaviors.eventCalendar={},r.behaviors.eventCalendar.from="",r.behaviors.eventCalendar.to="",r.behaviors.eventCalendar.categories="",r.behaviors.eventCalendar.attach=function(a){o(".ajax-events",a).once("eventCalendar").each(function(){var t=r.behaviors.eventCalendar,n=r.behaviors.ajaxViewLoading;t.from=o(".filterform .from-date"),t.to=o(".filterform .to-date"),t.categories=o(".filterform .categories"),o(".filter-list").on("change",function(){t.reloadList()});var a=2;o(window).width()<740&&(a=1),t.from.datepicker({dateFormat:"M d, yy",monthNames:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],changeMonth:!0,changeYear:!0,showAnim:"fadeIn",yearRange:"c:c+1",numberOfMonths:a,onSelect:function(a){t.to.datepicker("option","minDate",a),o(this).change()}}),t.to.datepicker({dateFormat:"M d, yy",monthNames:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],changeMonth:!0,changeYear:!0,showAnim:"fadeIn",yearRange:"c:c+1",numberOfMonths:a}),window.onpopstate=function(a){var e="";null!==a.state?e=o.parseJSON(a.state.params):(e=n.params,t.categories.val("All").blur().dropdown("update"));a=o(".filter-ajax").offset().top-200;o("html, body").animate({scrollTop:a},"500",function(){n.displayList(n.ajaxContainer,n.ajaxPath,e)})}})},r.behaviors.eventCalendar.reloadList=function(){var a=r.behaviors.eventCalendar,e=r.behaviors.ajaxViewLoading,t='{"from":"'+(Date.parse(a.from.val()).toString("yyyy-MM-dd")+" 00:00:01")+'","to":"'+(Date.parse(a.to.val()).toString("yyyy-MM-dd")+" 23:59:59")+'","category":"'+a.categories.val()+'"}';e.xhr.abort(),e.displayList(e.ajaxContainer,e.ajaxPath,o.parseJSON(t)),window.history.pushState({params:t},null,window.location)}}(jQuery,Drupal);
//# sourceMappingURL=data:application/json;charset=utf8;base64,

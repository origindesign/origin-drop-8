"use strict";!function(s,n){n.behaviors.ajaxViewLoading={},n.behaviors.ajaxViewLoading.xhr=null,n.behaviors.ajaxViewLoading.ajaxContainer="",n.behaviors.ajaxViewLoading.ajaxPath="",n.behaviors.ajaxViewLoading.params="",n.behaviors.ajaxViewLoading.urlParams="",n.behaviors.ajaxViewLoading.filterForm=s(".filterform"),n.behaviors.ajaxViewLoading.categories=s(".filterform .categories"),n.behaviors.ajaxViewLoading.attach=function(a){var i=n.behaviors.ajaxViewLoading;s(".ajax-list-container",a).once("ajaxViewLoading").each(function(){i.ajaxContainer=s(this),i.ajaxPath=i.ajaxContainer.attr("data-ajax-path"),i.params=i.ajaxContainer.data("default-params"),""!==window.location.hash&&i.updateParamsFromHash(),i.displayList(i.ajaxContainer,i.ajaxPath,i.params),s(window).off("hashchange.form-fragment").on("hashchange",function(){i.updateParamsFromHash(),i.displayList(i.ajaxContainer,i.ajaxPath,i.params)})})},n.behaviors.ajaxViewLoading.updateParamsFromHash=function(){var e=n.behaviors.ajaxViewLoading,a=window.location.hash.substring(2).split("/");s.each(a,function(a,i){i=i.split("=");e.params[i[0]]=i[1]})},n.behaviors.ajaxViewLoading.updateFilters=function(a){var i,e,r=n.behaviors.ajaxViewLoading,o=s(".filterform .from-date"),t=s(".filterform .to-date");0<o.length&&0<t.length&&(i=a.from.split("-"),e=a.to.split("-"),o.val(Date.parse(i[1]+"-"+i[0]+"-"+i[2]).toString("MMM d, yyyy")),t.val(Date.parse(e[1]+"-"+e[0]+"-"+e[2]).toString("MMM d, yyyy"))),0<r.categories.length&&(e=void 0,e="All"!==a.category?a.category:"All",r.categories.val(e).blur().dropdown("update"))},n.behaviors.ajaxViewLoading.createUrlParams=function(a){var e=n.behaviors.ajaxViewLoading;e.urlParams="?";var r=Object.keys(a),o=Object.values(a);s.each(r,function(a,i){e.urlParams+=i+"="+o[a],a!==r.length-1&&(e.urlParams+="&")})},n.behaviors.ajaxViewLoading.displayList=function(i,a,e){var r=n.behaviors.ajaxViewLoading,o="";i.html("").removeClass("loaded"),r.updateFilters(e),r.createUrlParams(e),r.xhr=s.ajax({type:"POST",url:a+r.urlParams+"&response_type=ajax",success:function(a){o=0<s(a).find(".view-empty").length?'<div class="no-results m-t-2">'+s(a).find(".view-empty").html()+"</div>":s(a).find(".view-content").html();a=s("<div/>",{class:"wrapper"});a.html('<div class="block block-system block-system-main-block">'+o+"</div>"),i.html(a),i.addClass("loaded"),n.attachBehaviors()}})}}(jQuery,Drupal);
//# sourceMappingURL=data:application/json;charset=utf8;base64,

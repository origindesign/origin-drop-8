"use strict";!function(a,e){e.behaviors.listing={},e.behaviors.listing.filterArr={},e.behaviors.listing.isotope="",e.behaviors.listing.isoContainer=a(".isotope"),e.behaviors.listing.isoGrid=e.behaviors.listing.isoContainer.find(".isoGrid"),e.behaviors.listing.linkFilter=e.behaviors.listing.isoContainer.find(".link-filter"),e.behaviors.listing.selectFilter=e.behaviors.listing.isoContainer.find(".filter-isotope select"),e.behaviors.listing.attach=function(i){var s=e.behaviors.listing;a(".listing.isotope",i).once("listing").each(function(){s.isoContainer.each(function(){s.isoGrid.append('<div class="iso-gutter"></div>'),s.isotope=s.isoGrid.isotope({masonry:{columnWidth:".iso-item",gutter:".iso-gutter"},itemSelector:".iso-item",percentPosition:!0}),s.isotope.imagesLoaded(e.behaviors.listing.isotope,function(){s.isotope.isotope("layout")}),s.selectFilter.on("change",function(){var i=a(this),t=i.val(),e=i.attr("data-filter-group");"all"!==t?s.filterArr[e]=t:delete s.filterArr[e],s.onChangeFilters()}),s.linkFilter.on("click",function(i){i.preventDefault(),i.stopPropagation();var t=a(this),e=t.attr("data-filter"),o=t.attr("data-filter-group");t.addClass("active").parent("li").siblings().find("a").removeClass("active"),"all"!==e?s.filterArr[o]=e:delete s.filterArr[o],s.onChangeFilters()})}),""!==window.location.hash&&s.updateList(),a(window).off("hashchange.form-fragment").on("hashchange",function(){s.updateList()})})},e.behaviors.listing.onChangeFilters=function(){var i=e.behaviors.listing;window.location.hash=i.createHashFilters(i.filterArr)},e.behaviors.listing.filterList=function(){var i=e.behaviors.listing,t=i.concatValues(i.filterArr);i.isotope.isotope({filter:t}).on("layoutComplete",function(){e.blazy.init.revalidate()}),i.isotope.data("isotope").filteredItems.length?a(".isoGrid .no-results").hide():a(".isoGrid .no-results").fadeIn()},e.behaviors.listing.updateList=function(){var r,i,t;"#/all"!==window.location.hash?(r=window.location.hash.substr(2).split("&"),Object.keys(r).forEach(function(i){var t=r[i].split("="),e=t[0],o=t[1],s=a('.link-filter[data-filter-group="'+e+'"][data-filter="'+o+'"]'),n=a('.filter-isotope .filter-list[data-filter-group="'+e+'"]');0<s.length&&s.click(),0<n.length&&n.val(o).change().blur().dropdown("update")})):(i=a(".filter-isotope ul"),t=a(".filter-isotope select.filter-list"),0<i.length&&i.each(function(){a(this).find('.link-filter[data-filter="all"]').click()}),0<t.length&&t.each(function(){a(this).val("all").change().blur().dropdown("update")})),e.behaviors.listing.filterList()},e.behaviors.listing.concatValues=function(t){var e="";return Object.keys(t).forEach(function(i){e+=t[i]}),e},e.behaviors.listing.createHashFilters=function(i){var t="#/";return t+=0!==Object.keys(i).length?a.param(i):"all"}}(jQuery,Drupal);
//# sourceMappingURL=data:application/json;charset=utf8;base64,

"use strict";!function(s,e){e.behaviors.listing={},e.behaviors.listing.filterArr={},e.behaviors.listing.isotope="",e.behaviors.listing.isoContainer=s(".isotope"),e.behaviors.listing.isoGrid=e.behaviors.listing.isoContainer.find(".isoGrid"),e.behaviors.listing.linkFilter=e.behaviors.listing.isoContainer.find(".link-filter"),e.behaviors.listing.selectFilter=e.behaviors.listing.isoContainer.find(".filter-isotope select"),e.behaviors.listing.attach=function(i){var o=e.behaviors.listing;s(".listing.isotope",i).once("listing").each(function(){o.isoContainer.each(function(){o.isoGrid.append('<div class="iso-gutter"></div>'),o.isotope=o.isoGrid.isotope({masonry:{columnWidth:".iso-item",gutter:".iso-gutter"},itemSelector:".iso-item",percentPosition:!0}),o.isotope.imagesLoaded(e.behaviors.listing.isotope,function(){o.isotope.isotope("layout")}),o.selectFilter.on("change",function(){var i=s(this),t=i.val(),i=i.attr("data-filter-group");"all"!==t?o.filterArr[i]=t:delete o.filterArr[i],o.onChangeFilters()}),o.linkFilter.on("click",function(i){i.preventDefault(),i.stopPropagation();var t=s(this),e=t.attr("data-filter"),i=t.attr("data-filter-group");t.addClass("active").parent("li").siblings().find("a").removeClass("active"),"all"!==e?o.filterArr[i]=e:delete o.filterArr[i],o.onChangeFilters()})}),""!==window.location.hash&&o.updateList(),s(window).off("hashchange.form-fragment").on("hashchange",function(){o.updateList()})})},e.behaviors.listing.onChangeFilters=function(){var i=e.behaviors.listing;window.location.hash=i.createHashFilters(i.filterArr)},e.behaviors.listing.filterList=function(){var i=e.behaviors.listing,t=i.concatValues(i.filterArr);i.isotope.isotope({filter:t}),i.isotope.data("isotope").filteredItems.length?s(".isoGrid .no-results").hide():s(".isoGrid .no-results").fadeIn()},e.behaviors.listing.updateList=function(){var o,i,t;"#/all"!==window.location.hash?(o=window.location.hash.substr(2).split("&"),Object.keys(o).forEach(function(i){var t=o[i].split("="),e=t[0],i=t[1],t=s('.link-filter[data-filter-group="'+e+'"][data-filter="'+i+'"]'),e=s('.filter-isotope .filter-list[data-filter-group="'+e+'"]');0<t.length&&t.click(),0<e.length&&e.val(i).change().blur().dropdown("update")})):(i=s(".filter-isotope ul"),t=s(".filter-isotope select.filter-list"),0<i.length&&i.each(function(){s(this).find('.link-filter[data-filter="all"]').click()}),0<t.length&&t.each(function(){s(this).val("all").change().blur().dropdown("update")})),e.behaviors.listing.filterList()},e.behaviors.listing.concatValues=function(t){var e="";return Object.keys(t).forEach(function(i){e+=t[i]}),e},e.behaviors.listing.createHashFilters=function(i){var t="#/";return t+=0!==Object.keys(i).length?s.param(i):"all"}}(jQuery,Drupal);
//# sourceMappingURL=data:application/json;charset=utf8;base64,
